#include <SoftwareSerial.h>
#include <DHT.h>

#define RX 2
#define TX 3
#define dht_apin 11 // Analog Pin sensor is connected to

// DHT Sensor Setup
#define DHT_PIN 12    // Pin connected to the DHT sensor
#define DHT_TYPE DHT11   // DHT sensor type (DHT11, DHT21, DHT22)

String SSID = "smart";       // AP NAME
String PASS = "123456789"; // AP PASSWORD
String API = "O1KVJTPTCPYUPNHK";   // Write API KEY
String HOST = "api.thingspeak.com";
String PORT = "80";
int countTrueCommand;
int countTimeCommand; 
boolean found = false; 
int valSensor = 1;

const int mq4Pin = A0; // Pin connected to the MQ-4 sensor

SoftwareSerial esp8266(RX,TX);

DHT dht(DHT_PIN, DHT_TYPE);

void setup() {
  Serial.begin(9600);
  pinMode(7, OUTPUT);
  pinMode(6, OUTPUT);
  pinMode(5, OUTPUT);
  esp8266.begin(115200);
  sendCommand("AT", 5, "OK");
  sendCommand("AT+CWMODE=1", 5, "OK");
  sendCommand("AT+CWJAP=\"" + SSID + "\",\"" + PASS + "\"", 20, "OK");

  dht.begin();
}

void loop() {
  // Read the MQ-4 sensor value
  int mq4Value = analogRead(mq4Pin);
  Serial.print("MQ-4: ");
  Serial.println(mq4Value);

  // Read the DHT sensor values
  float humidity = dht.readHumidity();
  float temperature = dht.readTemperature();
  Serial.print("Humidity: ");
  Serial.println(humidity);
  Serial.print("Temperature: ");
  Serial.println(temperature);

  if (mq4Value > 300) {
    digitalWrite(7, HIGH);
    digitalWrite(6, HIGH);
    digitalWrite(5, LOW);
  } else {
    digitalWrite(7, LOW);
    digitalWrite(6, LOW);
    digitalWrite(5, HIGH);
  }

  String getData = "GET /update?api_key=" + API + "&field1=" + String(mq4Value) + "&field2=" + String(humidity) + "&field3=" + String(temperature);
  sendCommand("AT+CIPMUX=1", 5, "OK");
  sendCommand("AT+CIPSTART=0,\"TCP\",\"" + HOST + "\"," + PORT, 15, "OK");
  sendCommand("AT+CIPSEND=0," + String(getData.length() + 4), 4, ">");
  esp8266.println(getData);
  delay(10);
  countTrueCommand++;
  sendCommand("AT+CIPCLOSE=0", 5, "OK");

  delay(5000); // Wait for 5 seconds before sending the next update
}

void sendCommand(String command, int maxTime, char readReplay[]) {
  Serial.print(countTrueCommand);
  Serial.print(". at command => ");
  Serial.print(command);
  Serial.print(" ");

  while (countTimeCommand < (maxTime * 1)) {
    esp8266.println(command);

    if (esp8266.find(readReplay)) {
      found = true;
      break;
    }

    countTimeCommand++;
  }
  
  if (found == true) {
    Serial.println("OK");
    countTrueCommand++;
    countTimeCommand = 0;
  }
  
  if (found == false) {
    Serial.println("Fail");
    countTrueCommand = 0;
    countTimeCommand = 0;
  }
  
  found = false;
}
